fix my backend issue:
server.js:
import express from "express";
import bodyParser from "body-parser";
import cors from "cors";
import { User } from "./models/User.js";
import dotenv from "dotenv";
import connectDB from "./config/db.js";
import cloudinary from "cloudinary";
const app = express();

// importing routes
import userRoutes from "./routes/userRoutes.js";
import authRoutes from "./routes/authRoutes.js";
import postRoutes from "./routes/postRoutes.js";

app.use("/api/user", userRoutes);
app.use("/api/auth", authRoutes);
app.use("/api/post", postRoutes);

// middlewares
app.use(express.json());

dotenv.config();

cloudinary.v2.config({
  cloud_name: process.env.Cloudinary_Cloud_Name,
  api_key: process.env.Cloudinary_Api,
  api_secret: process.env.Cloudinary_Secret,
});

app.use(cors());
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({extended: true}));

const port = process.env.PORT || 6000;


app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
  connectDB();
});

authRoutes:
import express from 'express';
import { loginUser, registerUser } from '../controllers/authController.js';
import uploadFile from '../middlewares/multer.js';

const router = express.Router();

router.post('/register', uploadFile, registerUser);
router.post('/login', loginUser);

export default router;

authControllers:
import getDataUrl from "../utils/urlGenerator.js";
import bcrypt from "bcrypt";
import cloudinary from "cloudinary";
import generateToken from "../utils/generateToken.js";

import { User } from "../models/User.js";
import TryCatch from "../utils/Trycatch.js";

export const registerUser = TryCatch(async (req, res) => {
  const { name, email, password, gender } = req.body;
  const file = req.file;

  if (!name || !email || !password || !gender) {
    return res.status(400).json({ message: "Please fill all fields" });
  }
  let user = await User.findOne({ email });
  if (user) {
    return res.status(400).json({ message: "User already exists" });
  }

  const fileUrl = getDataUrl(file);

  const hashPassword = await bcrypt.hash(password, 10);

  const myCloud = await cloudinary.v2.uploader.upload(fileUrl.content);

  user = await User.create({
    name,
    email,
    password: hashPassword,
    gender,
    profilePic: {
      id: myCloud.public_id,
      url: myCloud.secure_url,
    },
  });

  generateToken(user._id, res);

  res.status(201).json({
    message: "User registered successfully",
    user,
  });
});


export const loginUser = TryCatch(async (req, res) => {
  const { email, password } = req.body;

  const user = await User.findOne({ email });

  if (!user) {
    return res.status(404).json({ message: "User not found"});
  }

  const comparePassword = await bcrypt.compare(password, user.password);

  if (!comparePassword) {
    return res.status(400).json({ message: "Invalid Credentials."});
  }

  generateToken(user._id, res);

  res.status(200).json({ message: "User Logged in successfully!"});
});

Trycatch.js:
const TryCatch = (handler) => {
  return async (req, res, next) => {
    try {
      await handler(req, res, next);
    } catch (error) {
      res.status(500).json(error.message);
    }
  };
};

export default TryCatch;

error:
"Cannot destructure property 'email' of 'req.body' as it is undefined."